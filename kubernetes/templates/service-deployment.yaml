apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  labels:
    app: nginx-app
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: LoadBalancer
  # ports:
  #   - port: {{ .Values.service.port }}
  #     targetPort: {{ .Values.nginx.listenPort }}
  #     protocol: TCP
  ports:
  - port: {{ .Values.nginx.listenPort }}
    nodePort: 30081
    protocol: TCP
  selector:
    app: nginx-app
    component: nginx-deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-nginx-deployment
  labels:
    app: nginx-app
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: nginx-deployment
  annotations:
    releaseTime: "{{ date "20060102150405" .Release.Time }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-app
      component: nginx-deployment
  strategy:
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: nginx-app
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
        component: nginx-deployment
      annotations:
        releaseTime: "{{ date "20060102150405" .Release.Time }}"
    spec:
      volumes:
        - name: nginx-conf
          configMap:
            name: sites-enabled-configmap
        - name: staticfiles
          emptyDir: {}
        {{- if and (eq .Values.global.environment "development") (ne .Values.global.baseFolder "value") }}
        - name: {{ include "kube-nginx-django.name" . }}-local-django
          hostPath:
            path: {{ .Values.global.baseFolder }}/{{ .Values.django.projectName }}
        {{- end }}
      initContainers:
        - name: migrate
          image: {{ .Values.django.image }}
          imagePullPolicy: {{ .Values.django.imagePullPolicy }}
          command: ["python", "manage.py", "migrate"]
          env:
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "kube-nginx-django.name" . }}-env
                  key: secret_key
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "kube-nginx-django.name" . }}-env
                  key: postgres-user
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "kube-nginx-django.name" . }}-env
                  key: postgres-password
            - name: DB_HOST
              value: {{ template "setPostgresHost" . }}
            - name: DB_PORT
              value: {{ .Values.postgresql.postgresqlPort | quote}}
        - name: init-project
          image: {{ .Values.django.image }}
          imagePullPolicy: {{ .Values.django.imagePullPolicy }}
          command: ["sh", "initialization/initialize_project.sh"]
          env:
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "kube-nginx-django.name" . }}-env
                  key: secret_key
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "kube-nginx-django.name" . }}-env
                  key: postgres-user
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "kube-nginx-django.name" . }}-env
                  key: postgres-password
            - name: DB_HOST
              value: {{ template "setPostgresHost" . }}
            - name: DB_PORT
              value: {{ .Values.postgresql.postgresqlPort | quote}}
        {{- if ne .Values.django.webDebug "True" }}
        - name: collectstatic
          image: {{ .Values.django.image }}
          imagePullPolicy: {{ .Values.django.imagePullPolicy }}
          command: ["python", "manage.py", "collectstatic", "--noinput"]
          volumeMounts:
            - name: staticfiles
              mountPath: /var/www/html/
        {{- end }}
      containers:
      - name: nginx
        image: nginx:stable
        imagePullPolicy: Always
        ports:
        - containerPort: 80
          name: backend-tcp
        volumeMounts:
          - name: nginx-conf
            mountPath: /etc/nginx/conf.d/
          - name: staticfiles
            mountPath: /var/www/html/
      - name: django
        image: {{ .Values.django.image }}
        imagePullPolicy: {{ .Values.django.imagePullPolicy }}
        {{- if eq .Values.django.webDebug "True" }}
        command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]
        {{- else }}
        command: ["gunicorn", "webapp.wsgi", "--bind", ":8000", "--reload"]
        {{- end}}
        ports:
          - containerPort: 8000
            protocol: TCP
        {{- if  and (eq .Values.global.environment "development") (ne .Values.global.baseFolder "value") }}
        # Mount local directory so we don't have to rebuild docker each code change
        volumeMounts:
          - name: {{ include "kube-nginx-django.name" . }}-local-django
            mountPath: /code/{{ .Values.django.projectName }}
            readOnly: False
        {{- end }}
        env:
          - name: ENVIRONMENT
            value: {{ .Values.global.environment }}
          - name: WEB_DEBUG
            value: {{ .Values.django.webDebug | quote }}
          - name: SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: {{ include "kube-nginx-django.name" . }}-env
                key: secret_key
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: {{ include "kube-nginx-django.name" . }}-env
                key: postgres-user
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "kube-nginx-django.name" . }}-env
                key: postgres-password
          - name: DB_HOST
            value: {{ template "setPostgresHost" . }}
          - name: DB_PORT
            value: {{ .Values.postgresql.postgresqlPort | quote}}